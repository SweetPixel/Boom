Thank you for your interest in the Simple Sliding Menus kit.IntroThe kit was designed for those who come to Unity and say "But how do I create menus for my games?". Menus, by defining their purpose, is probably the most basic requirement of any game:"Display a list of options and behave accordingly". When you think of it that way, menus can have a variety of uses from as simple as actually showing a main menu for your game or for something a little more subtle like displaying a list of possible interactions when meeting a character or when finding a collectible item etc etc etc.This is the point that tends to confuse newcomers. How can I make a menu do something specific like that? The clear answer is to simply say "if I press this button, then do that" but this means that every single menu item in every single menu in every single scene in every single game will have to be redesigned and hard coded to perform the appropriate actions. Not only is that very cumbersome and insanely time consuming to code but it also goes against the very core principle of programming which is to code once and use forever. Never code anything twice.So this brings us to the current catch 22. How do you code something dynamic to perform specific actions?Well, with Unity's component based coding, that is actually the least of our worries so instead, for this kit,I changed the question a little bit to read "How do you code something dynamic to perform specific actions and look cool while doing so?". Welcome to the Simple Sliding Menus kit.TheoryWhen you look at a menu system, it basically has to do three things:1. Display a list of options2. Perform an action or display a sub menu3. Navigate BACK through the menu treeSo, I created a system where you define each list of options as a "Menu". Each option under a menu I called a "Menu Item". I then coded each menu item to perform a single function. If you set it's function to the name of another menu, it will display that menu. If you set it's action to something else, it will send the gameObject your action as a command to be performed. I then added a function to act as the "Back" functionality. So, we have a menu system where each menu item can load a different menu and it will tell your gameObject to perform any action you choose. You just have to make sure that the game object containing the menu system actually HAS a function matching the desired action. To do this, simply create a new script and give it all the actions you wish to perform from your menus. This could, then, of course be anything you like. For example, you could have a menu item called "Show Leader boards" and it could have an action called "ShowLeaderBoards" which could call the Simple Online Leaderboards Kit to fetch and display your leaderboards.UseTo setup a menu system is really simple. Simply drop the menu system script onto any object you want and, optionally, drop in a GUISkin. That is it. You are now ready to create your menus.Step 1 in creating a menu system is to define how many menus you want. Initially start with 1 and just add them as you go along. So open up the Menus arrow and select 1.Step 2. Give your menu a name and define where it should display on the screen. The name can be anything you want but it is case sensitive.Step 3. Select how fast you want the menus to display (300 is a very decent speed), and what direction is should slide in from and slide out to.Step 4. Define your menu items.Defining menu items involve these steps:Step 1. Select how many items you want to display in the menu (items are scaled to fit the size you specified in Step 2 above.Step 2. For each item, either give it text to show or select an image to display.Step 3. In MenuAction, enter what action you want that menu item to perform. Either write the name of another menu or write an action you want to perform.Notes.The Simple Sliding Menus kit was designed to be used either as a standalone menu that just pops up when the player hits a button or as a menu system attached to a button that is always visible on screen. In the case of the latter, when a menu action is performed, the menu system is disabled to prevent the player from opening up multiple windows on top of each other and cause all sorts of other glitches. While the menu system is disabled, menu items are not clickable. Thus, when you activate the menu system, I would recommend always doing a SendMessage("ActivateMenu",true) to ensure the menu system is active.And that is all there is to it.Enjoy...Copyright © myBad Studios 2011http://www.mybadstudios.com